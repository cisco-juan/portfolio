---
import Logo from "./Logo.astro";

const navItems = [
  { href: '#hero', label: 'Inicio' },
  { href: '#about', label: 'Acerca de' },
  { href: '#experience', label: 'Experiencia' },
  { href: '#projects', label: 'Proyectos' },
  { href: '#contact', label: 'Contacto' }
];
---

<nav class="fixed top-0 left-0 right-0 z-50 bg-slate-900/80 backdrop-blur-sm border-b border-slate-800">
  <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
    <div class="flex justify-between items-center h-16">
      <!-- Logo -->
      <a 
        href="#" 
        class="text-xl font-bold gradient-text transition-transform duration-200"
      >
        <Logo width={200} height={60} fontSize={42} />
      </a>
      
      <!-- Desktop Navigation -->
      <div class="hidden md:flex space-x-8">
        {navItems.map((item) => (
          <a
            href={item.href}
            class="text-slate-300 hover:text-blue-400 focus-ring px-3 py-2 rounded-md text-sm font-medium transition-colors duration-200"
          >
            {item.label}
          </a>
        ))}
      </div>
      
      <!-- Mobile menu button -->
      <button
        id="mobile-menu-button"
        class="md:hidden p-2 rounded-md text-slate-300 hover:text-white hover:bg-slate-800 focus-ring"
        aria-label="Abrir menÃº"
      >
        <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16"></path>
        </svg>
      </button>
    </div>
  </div>
  
  <!-- Mobile Navigation -->
  <div id="mobile-menu" class="md:hidden hidden bg-slate-900/95 border-t border-slate-800">
    <div class="px-2 pt-2 pb-3 space-y-1">
      {navItems.map((item) => (
        <a
          href={item.href}
          class="text-slate-300 hover:text-blue-400 hover:bg-slate-800 block px-3 py-2 rounded-md text-base font-medium transition-colors duration-200"
        >
          {item.label}
        </a>
      ))}
    </div>
  </div>
</nav>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const mobileMenuButton = document.getElementById('mobile-menu-button');
    const mobileMenu = document.getElementById('mobile-menu');
    
    if (mobileMenuButton && mobileMenu) {
      mobileMenuButton.addEventListener('click', () => {
        mobileMenu.classList.toggle('hidden');
      });
      
      // Close mobile menu when clicking on a link
      const mobileLinks = mobileMenu.querySelectorAll('a');
      mobileLinks.forEach(link => {
        link.addEventListener('click', () => {
          mobileMenu.classList.add('hidden');
        });
      });
    }
    
    // Enhanced smooth scrolling with section transitions
    const navLinks = document.querySelectorAll('nav a[href^="#"]');
    const sections = document.querySelectorAll('section[id]');
    let currentSectionIndex = 0;
    let isTransitioning = false;
    
    // Create section mapping
    const sectionMap = Array.from(sections).map(section => ({
      id: section.id,
      element: section
    }));
    
    // Handle navigation clicks
    navLinks.forEach(link => {
      link.addEventListener('click', (e) => {
        e.preventDefault();
        if (isTransitioning) return;
        
        const targetId = link.getAttribute('href')?.substring(1);
        if (!targetId) return;
        
        const targetSection = document.getElementById(targetId);
        const targetIndex = sectionMap.findIndex(section => section.id === targetId);
        
        if (targetSection && targetIndex !== -1 && targetIndex !== currentSectionIndex) {
          isTransitioning = true;
          transitionToSection(targetSection, targetIndex);
        }
      });
    });

    // Section transition function
    function transitionToSection(targetSection: HTMLElement, targetIndex: number) {
      const currentSection = sectionMap[currentSectionIndex].element;
      
      // Add transition classes
      targetSection.classList.add('section-slide-up-enter');
      targetSection.style.zIndex = '20';
      
      // Scroll to target section smoothly
      targetSection.scrollIntoView({
        behavior: 'smooth',
        block: 'start'
      });
      
      // Update navigation highlighting immediately
      updateActiveNavLink(targetSection.id);
      
      // Clean up after animation
      setTimeout(() => {
        targetSection.classList.remove('section-slide-up-enter');
        targetSection.style.zIndex = '';
        currentSectionIndex = targetIndex;
        isTransitioning = false;
      }, 800);
    }
    
    // Update active navigation link
    function updateActiveNavLink(sectionId: string) {
      navLinks.forEach(link => {
        link.classList.remove('text-blue-400');
        link.classList.add('text-slate-300');
        
        if (link.getAttribute('href') === `#${sectionId}`) {
          link.classList.remove('text-slate-300');
          link.classList.add('text-blue-400');
        }
      });
    }
    
    // Intersection Observer for scroll-based highlighting
    const observerOptions = {
      threshold: 0.3,
      rootMargin: '-100px 0px -200px 0px'
    };
    
    const observer = new IntersectionObserver((entries) => {
      if (isTransitioning) return;
      
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          const sectionId = entry.target.getAttribute('id');
          const sectionIndex = sectionMap.findIndex(section => section.id === sectionId);
          
          if (sectionIndex !== -1) {
            currentSectionIndex = sectionIndex;
            if (sectionId) {
              updateActiveNavLink(sectionId);
            }
          }
        }
      });
    }, observerOptions);
    
    sections.forEach(section => observer.observe(section));
    
    // Initialize first section as active
    if (sections.length > 0) {
      updateActiveNavLink(sections[0].id);
    }
  });
</script>